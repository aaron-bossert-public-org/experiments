implement gl backend 


implement metal backend


implement directx backend


implement vulkan backend 

add support for mapping sub buffers
add support for primitive arrays

write unit tests
add new examples
migrate example to use purely atmos

implement composite context for profiling, constructs profiler_texture2d which owns vulkan_texture and forward all calls to wrapping them with callstack timers

migrate pipeline code to batching system
build graphics pipeline cache

add debug_check_barriers to job_dependencies. it checks all read/write resources to see if their barriers are compatible with the job scope


//////////////////////////////////////
(CURRENT PROGRESS POINT)
//////////////////////////////////////


implement barriers for job dependencies

build vertex attributes descriptor to use same api as vulkan primitives descriptor
move attribute and primitive MAX_PARAMETERS next to vertex parameters and parameters respectively 
use vulkan primitives descriptor to build vulkan dependencies
- can prototype this inside vulkan synchronization by using it in void create_descriptor_sets(), and making sure storage buffer works with it 


add storage buffer to VkWriteDescriptorSet when parameter::STORAGE_BUFFER is detetected by spirv-cross

use atmos for generating descriptor sets

use vulkan primitives descriptor to build descriptor sets

add storage buffer bit to vertex, index, uniform, texture memory buffers so they can be read/ modiyed in a compute shader

rename buffer to UNIFORM_BUFFER and STORAGE_BUFFER

make sure all enums use 0 as an error sentinel
check spirv output for readonly / write only decorations





