implement gl backend 


implement metal backend


implement directx backend


implement vulkan backend 

add support for mapping sub buffers
add support for primitive arrays

write unit tests
add new examples
remove raw vulkan type accessors (vulkan_context->device etc...)


implement composite context for profiling, constructs profiler_texture2d which owns vulkan_texture and forward all calls to wrapping them with callstack timers

implement implicit readback. when mapping a buffer, check to see if there are pending write jobs from the gpu side. sync and copy to cpuside if so. if buffer is peresistent it needs to wait for the last copy to complete.

add support for compute shaders

implement reserved memory type for vulkan_buffer and vulkan image

implement deferred upload. when uploading data to gpu, wait until resource to be used by a readable job before uploading. combined with implicit read back this should allow for gpu write only buffers to be synchronized properly using just storage buffer decorators in shader and memory_type on cpu side.



//////////////////////////////////////
(CURRENT PROGRESS POINT)
//////////////////////////////////////


migrate example to use purely atmos

run exanple through new batching system

combine vulkan context member fields into config struct

add virtual validate_layout to resource, which should be called when dependencies are added, this way images can validate but buffers can ignore. use this in on_barrier when queue is null

implement abandoning for write combined buffers, remove device wait idle, wait queues etc. when uploading write combined, abandon previous gpu buffer and clear resource job state.

implement build mipmaps as vulkan job

draw target owns command buffer pool, a command buffer for each swap index, and a fence for each command buffer. this is used to prevent over running the swap count and to prevent having to dynamically create command buffers each frame (reset after waiting on the fence)

migrate pipeline code to batching system
vulkan context builds graphics piplines
build graphics pipeline cache
vulkan batch nodes selects the proper vk pipeline based on draw target size
vulkan context implements make shared for all object types, and does not memoize those that do not need it, but does allow iterating over live instances of each type of object
assert vertex parameters count is not too large in its constructor, or program if it is allocated in place within program::make 
implement draw target resizing as draw target rebinding on batches
graphics pipeline tightly bound to a draw target via batches using scoped pointer. this binding can be changed at runtime, but batches must point to a valid draw target. batches cannot be allowed to extend the lifetime of the draw target they reference
implement queue ownership transfers inside barriermanager, using n*n*2 premade semaphores
implement barrier manager submit_frame_job and frame_dependency
use vulkan context as source of truth for swap count and sample count

think about removing vulkan_pipeine_cache, maybe unnecessary. just memoize renderstates and primitives instead
finish error proofing job dependencies
vulkan_job implements begin(queue) and end() which accepts a command buffer and writes barriers to it.
add config to vulkan_job. config holds barrier manager. 

implement barriers for job dependencies

build vertex attributes descriptor to use same api as vulkan primitives descriptor
move attribute and primitive MAX_PARAMETERS next to vertex parameters and parameters respectively 
use vulkan primitives descriptor to build vulkan dependencies
- can prototype this inside vulkan synchronization by using it in void create_descriptor_sets(), and making sure storage buffer works with it 


add storage buffer to VkWriteDescriptorSet when parameter::STORAGE_BUFFER is detetected by spirv-cross

use atmos for generating descriptor sets

use vulkan primitives descriptor to build descriptor sets

add storage buffer bit to vertex, index, uniform, texture memory buffers so they can be read/ modiyed in a compute shader

rename buffer to UNIFORM_BUFFER and STORAGE_BUFFER

make sure all enums use 0 as an error sentinel
check spirv output for readonly / write only decorations





